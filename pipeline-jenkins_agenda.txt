pipeline {
    agent {
        node {
            label 'master'
        }
    }
    tools {
        maven 'maven'
        jdk 'jdk-jenkins'
    }
    environment {
        //path donde se encuentra nuestro dockerfile y demás archivos de configuración
        conf_filePath = "/var/lib/jenkins/dockerfiles"
        //nombre del archivo dockerfile
        dockerfile_name = "Dockerfile"
        registry = "igr1985/agenda"
        //credencials dockerhub
        registryCredential = 'dockerhub'
        //Nombre de nuestro repositorio
        repo_name = 'isagonrod/agenda_back.git'
        //Nombre del Workspace
        workspace_name = '/var/lib/jenkins/workspace/prueba-jenkins'
        //Nombre del direcorio de almacena el proyecto dentro del workspace
        projectdir_name = 'agenda_back'
    }
    stages {
        stage('Test') {
            steps {
                script {
                    //Si la carpeta del proyecto ya existe, la borramos antes del clone
                    try {
                        //en Windows seria algo tal que asi: /d/Jenkins/installed/.jenkins/workspace/prueba/agendaback
                        echo 'Limpiando carpeta de proyecto...'
                        sh 'rm -rf ${projectdir_name}'
                    } catch (Exception e) {
                        echo 'Nada que limpiar en carpeta de proyecto.'
                    }
                }
                //Nos descargamos la rama master
                sh 'git clone --branch master https://github.com/${repo_name}'
                //copiamos el archivo properties con la configuración del servidor develop de BBDD
                //sh 'mkdir ${projectdir_name}/src/main/resources'
                //sh 'cp ${conf_filePath}/bbdd_conf_dev.txt ${projectdir_name}/src/main/resources/application.properties'

                //Cambiamos a la carpeta del proyecto, y ejecutamos los test
                script {
                    dir(projectdir_name) {
                        //Al colocar los test dentro de un try nos permite avanzar al siguiente paso del pipeline
                        //aunque fallen
                        try {
                            sh 'echo haciendo test'
                            //Descomentar esta linea para ejecutar los test
                            //sh 'mvn test'
                        } catch (Exception e) {
                            sh 'Los tests han fallado'
                        }
                        //Vamos a subir a la rama pro el contenido de la rama master
                        //Aunque el repositorio es público, para hacer el push necesitamos las credenciales
                        //Cada uno pondrá en el ID el que haya creado previamente en el proceso de configuración
                        withCredentials([string(credentialsId: 'github', variable: 'TOKEN')]) {
                            echo 'Eliminamos rama PRO actual y la recreamos localmente'
                            //Eliminamos la rama pro actual
                            //sh 'git push https://$TOKEN@github.com/${repo_name} -d pro'
                            //Volvemos a crearla con el contenido de la rama master
                            //sh 'git checkout -b pro master'
                        }
                    }
                }

                //Si pasamos los tests copiamos la configuracion de producción de BBDD a la carpeta del proyecto
                //y hacemos el push la rama de producción. recordemos que este archivo no se subirá al repositorio
                //porque está dentro del .gitignore
                //sh 'cp ${conf_filePath}/bbdd_conf_prod.txt ${projectdir_name}/src/main/resources/application.properties'
                script {
                    dir(projectdir_name) {
                        withCredentials([string(credentialsId: 'github', variable: 'TOKEN')]) {
                            echo 'Push a PRO de la nueva rama local'
                            //sh 'git push --set-upstream https://$TOKEN@github.com/${repo_name} pro'
                        }
                    }
                }
            }
        }
        stage('Build Docker') {
            steps {
                //sh'chmod -R 777 ../'
                sh 'mvn -DskipTests -f ${projectdir_name}/ clean package'
                script {
                    dockerImage = docker.build(registry, "-f ${projectdir_name}/${dockerfile_name} ${projectdir_name}")
                }
            }
        }
        stage('Push Docker') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Run Docker') {
            steps {
                sh 'docker run -d -p 91:8080 ${registry}'
            }
        }
        stage('Deploy app en AWS') {
            steps {
                sh 'aws s3 cp ${conf_filePath}/docker-compose.yml  s3://elasticbeanstalk-us-east-1-587942130445'
                sh 'aws elasticbeanstalk create-application-version --application-name agenda --version-label 4 --source-bundle S3Bucket=elasticbeanstalk-us-east-1-587942130445,S3Key=docker-compose.yml --region us-east-1'
            }
        }
    }
}